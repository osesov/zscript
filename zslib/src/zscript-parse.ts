/* eslint-disable */

import { UnitInfo, ParserHelper, CurrentContext } from './lang';



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { start: peg$parsestart };
// @ts-ignore
  var peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  var peg$c0 = "{";
  var peg$c1 = "}";
  var peg$c2 = "if";
  var peg$c3 = "ifndef";
  var peg$c4 = "ifdef";
  var peg$c5 = "elif";
  var peg$c6 = "else";
  var peg$c7 = "endif";
  var peg$c8 = "define";
  var peg$c9 = "include";
  var peg$c10 = "\r";
  var peg$c11 = "\n";
  var peg$c12 = "=";
  var peg$c13 = ",";
  var peg$c14 = ";";
  var peg$c15 = "(";
  var peg$c16 = ")";
  var peg$c17 = ":";
  var peg$c18 = "type";
  var peg$c19 = "implements";
  var peg$c20 = "public";
  var peg$c21 = "protected";
  var peg$c22 = "private";
  var peg$c23 = "ptr";
  var peg$c24 = "this";
  var peg$c25 = "void";
  var peg$c26 = "bool";
  var peg$c27 = "str";
  var peg$c28 = "fix";
  var peg$c29 = "int";
  var peg$c30 = "long";
  var peg$c31 = "byte";
  var peg$c32 = "float";
  var peg$c33 = "double";
  var peg$c34 = "/*";
  var peg$c35 = "*/";
  var peg$c36 = "//";
  var peg$c37 = "interface";
  var peg$c38 = "class";
  var peg$c39 = "#";
  var peg$c40 = "return";
  var peg$c41 = "break";
  var peg$c42 = "continue";
  var peg$c43 = "for";
  var peg$c44 = "const";
  var peg$c45 = "mod";
  var peg$c46 = "shl";
  var peg$c47 = "shr";
  var peg$c48 = "or";
  var peg$c49 = "and";
  var peg$c50 = "xor";
  var peg$c51 = "as";
  var peg$c52 = "not";
  var peg$c53 = "_";
  var peg$c54 = "+=";
  var peg$c55 = "-=";
  var peg$c56 = "*=";
  var peg$c57 = "/=";
  var peg$c58 = "%=";
  var peg$c59 = "^=";
  var peg$c60 = "&=";
  var peg$c61 = ">>=";
  var peg$c62 = "<<=";
  var peg$c63 = "&&=";
  var peg$c64 = "||=";
  var peg$c65 = "--";
  var peg$c66 = "++";
  var peg$c67 = "<<";
  var peg$c68 = ">>";
  var peg$c69 = "||";
  var peg$c70 = "&&";
  var peg$c71 = "==";
  var peg$c72 = "!=";
  var peg$c73 = ">";
  var peg$c74 = ">=";
  var peg$c75 = "<";
  var peg$c76 = "<=";

  var peg$r0 = /^["]/;
  var peg$r1 = /^[^"\n]/;
  var peg$r2 = /^[<]/;
  var peg$r3 = /^[^>\n]/;
  var peg$r4 = /^[>]/;
  var peg$r5 = /^[^\n\r]/;
  var peg$r6 = /^[^=;,]/;
  var peg$r7 = /^[^;]/;
  var peg$r8 = /^[ \t\r\n]/;
  var peg$r9 = /^[ \t]/;
  var peg$r10 = /^[_a-zA-Z]/;
  var peg$r11 = /^[_a-zA-Z0-9]/;
  var peg$r12 = /^[^\\"]/;
  var peg$r13 = /^[\\]/;
  var peg$r14 = /^[']/;
  var peg$r15 = /^[^\\']/;
  var peg$r16 = /^[0-9]/;
  var peg$r17 = /^[.]/;
  var peg$r18 = /^[eE]/;
  var peg$r19 = /^[\-+]/;
  var peg$r20 = /^[\-_+~!*\/%\^=[\]|&?:.]/;

  var peg$e0 = peg$literalExpectation("{", false);
  var peg$e1 = peg$literalExpectation("}", false);
  var peg$e2 = peg$literalExpectation("if", false);
  var peg$e3 = peg$literalExpectation("ifndef", false);
  var peg$e4 = peg$literalExpectation("ifdef", false);
  var peg$e5 = peg$literalExpectation("elif", false);
  var peg$e6 = peg$literalExpectation("else", false);
  var peg$e7 = peg$literalExpectation("endif", false);
  var peg$e8 = peg$literalExpectation("define", false);
  var peg$e9 = peg$literalExpectation("include", false);
  var peg$e10 = peg$classExpectation(["\""], false, false);
  var peg$e11 = peg$classExpectation(["\"", "\n"], true, false);
  var peg$e12 = peg$classExpectation(["<"], false, false);
  var peg$e13 = peg$classExpectation([">", "\n"], true, false);
  var peg$e14 = peg$classExpectation([">"], false, false);
  var peg$e15 = peg$classExpectation(["\n", "\r"], true, false);
  var peg$e16 = peg$literalExpectation("\r", false);
  var peg$e17 = peg$literalExpectation("\n", false);
  var peg$e18 = peg$classExpectation(["=", ";", ","], true, false);
  var peg$e19 = peg$literalExpectation("=", false);
  var peg$e20 = peg$literalExpectation(",", false);
  var peg$e21 = peg$literalExpectation(";", false);
  var peg$e22 = peg$literalExpectation("(", false);
  var peg$e23 = peg$literalExpectation(")", false);
  var peg$e24 = peg$literalExpectation(":", false);
  var peg$e25 = peg$literalExpectation("type", false);
  var peg$e26 = peg$classExpectation([";"], true, false);
  var peg$e27 = peg$literalExpectation("implements", false);
  var peg$e28 = peg$literalExpectation("public", false);
  var peg$e29 = peg$literalExpectation("protected", false);
  var peg$e30 = peg$literalExpectation("private", false);
  var peg$e31 = peg$literalExpectation("ptr", false);
  var peg$e32 = peg$literalExpectation("this", false);
  var peg$e33 = peg$literalExpectation("void", false);
  var peg$e34 = peg$literalExpectation("bool", false);
  var peg$e35 = peg$literalExpectation("str", false);
  var peg$e36 = peg$literalExpectation("fix", false);
  var peg$e37 = peg$literalExpectation("int", false);
  var peg$e38 = peg$literalExpectation("long", false);
  var peg$e39 = peg$literalExpectation("byte", false);
  var peg$e40 = peg$literalExpectation("float", false);
  var peg$e41 = peg$literalExpectation("double", false);
  var peg$e42 = peg$anyExpectation();
  var peg$e43 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false);
  var peg$e44 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e45 = peg$literalExpectation("/*", false);
  var peg$e46 = peg$literalExpectation("*/", false);
  var peg$e47 = peg$literalExpectation("//", false);
  var peg$e48 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"]], false, false);
  var peg$e49 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e50 = peg$literalExpectation("interface", false);
  var peg$e51 = peg$literalExpectation("class", false);
  var peg$e52 = peg$classExpectation(["\\", "\""], true, false);
  var peg$e53 = peg$classExpectation(["\\"], false, false);
  var peg$e54 = peg$classExpectation(["'"], false, false);
  var peg$e55 = peg$classExpectation(["\\", "'"], true, false);
  var peg$e56 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e57 = peg$classExpectation(["."], false, false);
  var peg$e58 = peg$classExpectation(["e", "E"], false, false);
  var peg$e59 = peg$classExpectation(["-", "+"], false, false);
  var peg$e60 = peg$literalExpectation("#", false);
  var peg$e61 = peg$literalExpectation("return", false);
  var peg$e62 = peg$literalExpectation("break", false);
  var peg$e63 = peg$literalExpectation("continue", false);
  var peg$e64 = peg$literalExpectation("for", false);
  var peg$e65 = peg$literalExpectation("const", false);
  var peg$e66 = peg$literalExpectation("mod", false);
  var peg$e67 = peg$literalExpectation("shl", false);
  var peg$e68 = peg$literalExpectation("shr", false);
  var peg$e69 = peg$literalExpectation("or", false);
  var peg$e70 = peg$literalExpectation("and", false);
  var peg$e71 = peg$literalExpectation("xor", false);
  var peg$e72 = peg$literalExpectation("as", false);
  var peg$e73 = peg$literalExpectation("not", false);
  var peg$e74 = peg$literalExpectation("_", false);
  var peg$e75 = peg$literalExpectation("+=", false);
  var peg$e76 = peg$literalExpectation("-=", false);
  var peg$e77 = peg$literalExpectation("*=", false);
  var peg$e78 = peg$literalExpectation("/=", false);
  var peg$e79 = peg$literalExpectation("%=", false);
  var peg$e80 = peg$literalExpectation("^=", false);
  var peg$e81 = peg$literalExpectation("&=", false);
  var peg$e82 = peg$literalExpectation(">>=", false);
  var peg$e83 = peg$literalExpectation("<<=", false);
  var peg$e84 = peg$literalExpectation("&&=", false);
  var peg$e85 = peg$literalExpectation("||=", false);
  var peg$e86 = peg$literalExpectation("--", false);
  var peg$e87 = peg$literalExpectation("++", false);
  var peg$e88 = peg$literalExpectation("<<", false);
  var peg$e89 = peg$literalExpectation(">>", false);
  var peg$e90 = peg$literalExpectation("||", false);
  var peg$e91 = peg$literalExpectation("&&", false);
  var peg$e92 = peg$literalExpectation("==", false);
  var peg$e93 = peg$literalExpectation("!=", false);
  var peg$e94 = peg$literalExpectation(">", false);
  var peg$e95 = peg$literalExpectation(">=", false);
  var peg$e96 = peg$literalExpectation("<", false);
  var peg$e97 = peg$literalExpectation("<=", false);
  var peg$e98 = peg$classExpectation(["-", "_", "+", "~", "!", "*", "/", "%", "^", "=", "[", "]", "|", "&", "?", ":", "."], false, false);
// @ts-ignore

  var peg$f0 = function() {// @ts-ignore
 return unitInfo; };// @ts-ignore

  var peg$f1 = function(r) {// @ts-ignore
 helper.docBlock = r; };// @ts-ignore

  var peg$f2 = function() {// @ts-ignore
 helper.openCurly() };// @ts-ignore

  var peg$f3 = function() {// @ts-ignore
 const name = helper.closeCurly(unitInfo, location()); if (name) helper.trace(location(), 'END', name) };// @ts-ignore

  var peg$f4 = function() {// @ts-ignore
return helper.isTopLevel()};// @ts-ignore

  var peg$f5 = function() {// @ts-ignore
return helper.isTopLevel()};// @ts-ignore

  var peg$f6 = function() {// @ts-ignore
return helper.isTopLevel()};// @ts-ignore

  var peg$f7 = function() {// @ts-ignore
return helper.isClass()};// @ts-ignore

  var peg$f8 = function() {// @ts-ignore
return helper.isClass()};// @ts-ignore

  var peg$f9 = function() {// @ts-ignore
return helper.isTopLevel()};// @ts-ignore

  var peg$f10 = function() {// @ts-ignore
return helper.isInterface()};// @ts-ignore

  var peg$f11 = function() {// @ts-ignore
return helper.isInterface()};// @ts-ignore

  var peg$f12 = function() {// @ts-ignore
return helper.isTopLevel()};// @ts-ignore

  var peg$f13 = function() {// @ts-ignore
return helper.isMethod() || helper.isFunction()};// @ts-ignore

  var peg$f14 = function(doc) {// @ts-ignore
 return [doc] };// @ts-ignore

  var peg$f15 = function(doc) {// @ts-ignore
 return [...doc] };// @ts-ignore

  var peg$f16 = function() {// @ts-ignore
 helper.beginCondition(location()) };// @ts-ignore

  var peg$f17 = function() {// @ts-ignore
 helper.beginCondition(location()) };// @ts-ignore

  var peg$f18 = function() {// @ts-ignore
 helper.beginCondition(location()) };// @ts-ignore

  var peg$f19 = function() {// @ts-ignore
 helper.restartCondition(location()) };// @ts-ignore

  var peg$f20 = function() {// @ts-ignore
 helper.restartCondition(location()) };// @ts-ignore

  var peg$f21 = function() {// @ts-ignore
 helper.endCondition(location()) };// @ts-ignore

  var peg$f22 = function(name) {
// @ts-ignore
            helper.trace(location(), 'DEFINE', name)
// @ts-ignore
            unitInfo.addDefine(name, location(), helper.docBlock);
        };// @ts-ignore

  var peg$f23 = function(file) {
// @ts-ignore
            const fileName = file.join('');
// @ts-ignore
            helper.trace(location(), "INCLUDE", fileName)
// @ts-ignore
            unitInfo.addInclude(false, fileName, location())
        };// @ts-ignore

  var peg$f24 = function(file) {
// @ts-ignore
            const fileName = file.join('');
// @ts-ignore
            helper.trace(location(), "INCLUDE", fileName)
// @ts-ignore
            unitInfo.addInclude(true, fileName, location())
        };// @ts-ignore

  var peg$f25 = function(name) {// @ts-ignore
 return [name, location()] };// @ts-ignore

  var peg$f26 = function(type, vars) {
// @ts-ignore
            helper.trace(location(), `global ${vars.map(e => e[0])}, type ${type}`)
// @ts-ignore
            unitInfo.addGlobalVariable(type, vars, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f27 = function(type, name, args) {
// @ts-ignore
            helper.trace(location(), 'Global method', name)

// @ts-ignore
            helper.beginContext(CurrentContext.FUNCTION, name, location())
// @ts-ignore
            unitInfo.beginGlobalFunction(type, name, args, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f28 = function(name, inherit) {
// @ts-ignore
            helper.trace(location(), 'INTERFACE', name)
// @ts-ignore
            helper.beginContext(CurrentContext.INTERFACE, name, location())
// @ts-ignore
            unitInfo.beginInterface(name, inherit, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f29 = function(name) {
            // forward interface declaration
// @ts-ignore
            helper.trace(location(), `forward interface ${name}`);
        };// @ts-ignore

  var peg$f30 = function(type, name, args) {
// @ts-ignore
            helper.trace(location(), 'Method: ', name)
// @ts-ignore
            unitInfo.addInterfaceMethod(type, name, args, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f31 = function(type, name) {// @ts-ignore
 return [type, name, location()] };// @ts-ignore

  var peg$f32 = function(type, vars) {
// @ts-ignore
            helper.trace(location(), `local ${vars.map(e => e[0])}, type ${type}`)
// @ts-ignore
            unitInfo.addMethodVariables(type, vars, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f33 = function(type, name) {
// @ts-ignore
            helper.trace(location(), `PropRead ${name}, type ${type}`)
// @ts-ignore
            unitInfo.addReadProperty(type, name, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f34 = function(name, type) {
// @ts-ignore
            helper.trace(location(), `PropWrite ${name}, type ${type}`)
// @ts-ignore
            unitInfo.addWriteProperty(type, name, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f35 = function(name, t) {
// @ts-ignore
            helper.trace(location(), `type ${name}`)
// @ts-ignore
            unitInfo.addType(name, t.join(''.trim()), location(), helper.docBlock)
        };// @ts-ignore

  var peg$f36 = function(name, impl) {
// @ts-ignore
            helper.trace(location(), `class ${name}, impl ${impl}`)
// @ts-ignore
            helper.beginContext(CurrentContext.CLASS, name, location())
// @ts-ignore
            unitInfo.beginClass(name, impl, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f37 = function(name) {
            // forward class declaration
// @ts-ignore
            helper.trace(location(), `forward class ${name}, impl ${impl}`)
        };// @ts-ignore

  var peg$f38 = function(visibility, type, name, args) {
// @ts-ignore
            helper.trace(location(), 'CLASS METHOD', name)

// @ts-ignore
            helper.beginContext(CurrentContext.METHOD, name, location())
// @ts-ignore
            unitInfo.beginClassMethod(visibility, type, name, args, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f39 = function(type, name) {
// @ts-ignore
            helper.trace(location(), `variable ${name}, type ${type}`)
// @ts-ignore
            unitInfo.addClassVariable(type, name, location(), helper.docBlock)
        };// @ts-ignore

  var peg$f40 = function(n) {// @ts-ignore
 return [n]};// @ts-ignore

  var peg$f41 = function(n) {// @ts-ignore
 return [n]};// @ts-ignore

  var peg$f42 = function() {// @ts-ignore
 return ParserHelper.stripBlockComments(text())};// @ts-ignore

  var peg$f43 = function() {// @ts-ignore
 return text().substring(2).trim() };// @ts-ignore

  var peg$f44 = function(name) {// @ts-ignore
 return text().trim() };
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseChunk();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseChunk();
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f0();
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseChunk() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDocBlock();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f1(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      s2 = peg$parseIfDirective();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parse_();
// @ts-ignore
        s2 = peg$parseIfdefDirective();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parse_();
// @ts-ignore
          s2 = peg$parseIfndefDirective();
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            s1 = peg$parse_();
// @ts-ignore
            s2 = peg$parseElifDirective();
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              s1 = [s1, s2];
// @ts-ignore
              s0 = s1;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              s1 = peg$parse_();
// @ts-ignore
              s2 = peg$parseElseDirective();
// @ts-ignore
              if (s2 !== peg$FAILED) {
// @ts-ignore
                s1 = [s1, s2];
// @ts-ignore
                s0 = s1;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                s1 = peg$parse_();
// @ts-ignore
                s2 = peg$parseEndifDirective();
// @ts-ignore
                if (s2 !== peg$FAILED) {
// @ts-ignore
                  s1 = [s1, s2];
// @ts-ignore
                  s0 = s1;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$currPos;
// @ts-ignore
                  s1 = peg$parse_();
// @ts-ignore
                  s2 = peg$parseDefineDirective();
// @ts-ignore
                  if (s2 !== peg$FAILED) {
// @ts-ignore
                    s1 = [s1, s2];
// @ts-ignore
                    s0 = s1;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$currPos;
// @ts-ignore
                    s1 = peg$parse_();
// @ts-ignore
                    s2 = peg$parseIncludeDirective();
// @ts-ignore
                    if (s2 !== peg$FAILED) {
// @ts-ignore
                      s1 = [s1, s2];
// @ts-ignore
                      s0 = s1;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$currPos;
// @ts-ignore
                      s1 = peg$parse_();
// @ts-ignore
                      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                        s2 = peg$c0;
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s2 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
// @ts-ignore
                      if (s2 !== peg$FAILED) {
// @ts-ignore
                        peg$savedPos = s0;
// @ts-ignore
                        s0 = peg$f2();
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$currPos;
// @ts-ignore
                        s1 = peg$parse_();
// @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                          s2 = peg$c1;
// @ts-ignore
                          peg$currPos++;
// @ts-ignore
                        } else {
// @ts-ignore
                          s2 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e1); }
                        }
// @ts-ignore
                        if (s2 !== peg$FAILED) {
// @ts-ignore
                          peg$savedPos = s0;
// @ts-ignore
                          s0 = peg$f3();
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$currPos;
// @ts-ignore
                          s1 = peg$parse_();
// @ts-ignore
                          peg$savedPos = peg$currPos;
// @ts-ignore
                          s2 = peg$f4();
// @ts-ignore
                          if (s2) {
// @ts-ignore
                            s2 = undefined;
// @ts-ignore
                          } else {
// @ts-ignore
                            s2 = peg$FAILED;
                          }
// @ts-ignore
                          if (s2 !== peg$FAILED) {
// @ts-ignore
                            s3 = peg$parseClassDeclaration();
// @ts-ignore
                            if (s3 !== peg$FAILED) {
// @ts-ignore
                              s1 = [s1, s2, s3];
// @ts-ignore
                              s0 = s1;
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            s0 = peg$currPos;
// @ts-ignore
                            s1 = peg$parse_();
// @ts-ignore
                            peg$savedPos = peg$currPos;
// @ts-ignore
                            s2 = peg$f5();
// @ts-ignore
                            if (s2) {
// @ts-ignore
                              s2 = undefined;
// @ts-ignore
                            } else {
// @ts-ignore
                              s2 = peg$FAILED;
                            }
// @ts-ignore
                            if (s2 !== peg$FAILED) {
// @ts-ignore
                              s3 = peg$parseGlobalVariable();
// @ts-ignore
                              if (s3 !== peg$FAILED) {
// @ts-ignore
                                s1 = [s1, s2, s3];
// @ts-ignore
                                s0 = s1;
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              s0 = peg$currPos;
// @ts-ignore
                              s1 = peg$parse_();
// @ts-ignore
                              peg$savedPos = peg$currPos;
// @ts-ignore
                              s2 = peg$f6();
// @ts-ignore
                              if (s2) {
// @ts-ignore
                                s2 = undefined;
// @ts-ignore
                              } else {
// @ts-ignore
                                s2 = peg$FAILED;
                              }
// @ts-ignore
                              if (s2 !== peg$FAILED) {
// @ts-ignore
                                s3 = peg$parseFunction();
// @ts-ignore
                                if (s3 !== peg$FAILED) {
// @ts-ignore
                                  s1 = [s1, s2, s3];
// @ts-ignore
                                  s0 = s1;
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s0;
// @ts-ignore
                                  s0 = peg$FAILED;
                                }
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
// @ts-ignore
                              if (s0 === peg$FAILED) {
// @ts-ignore
                                s0 = peg$currPos;
// @ts-ignore
                                s1 = peg$parse_();
// @ts-ignore
                                peg$savedPos = peg$currPos;
// @ts-ignore
                                s2 = peg$f7();
// @ts-ignore
                                if (s2) {
// @ts-ignore
                                  s2 = undefined;
// @ts-ignore
                                } else {
// @ts-ignore
                                  s2 = peg$FAILED;
                                }
// @ts-ignore
                                if (s2 !== peg$FAILED) {
// @ts-ignore
                                  s3 = peg$parseClassMethod();
// @ts-ignore
                                  if (s3 !== peg$FAILED) {
// @ts-ignore
                                    s1 = [s1, s2, s3];
// @ts-ignore
                                    s0 = s1;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    peg$currPos = s0;
// @ts-ignore
                                    s0 = peg$FAILED;
                                  }
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s0;
// @ts-ignore
                                  s0 = peg$FAILED;
                                }
// @ts-ignore
                                if (s0 === peg$FAILED) {
// @ts-ignore
                                  s0 = peg$currPos;
// @ts-ignore
                                  s1 = peg$parse_();
// @ts-ignore
                                  peg$savedPos = peg$currPos;
// @ts-ignore
                                  s2 = peg$f8();
// @ts-ignore
                                  if (s2) {
// @ts-ignore
                                    s2 = undefined;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    s2 = peg$FAILED;
                                  }
// @ts-ignore
                                  if (s2 !== peg$FAILED) {
// @ts-ignore
                                    s3 = peg$parseClassVariableDeclaration();
// @ts-ignore
                                    if (s3 !== peg$FAILED) {
// @ts-ignore
                                      s1 = [s1, s2, s3];
// @ts-ignore
                                      s0 = s1;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      peg$currPos = s0;
// @ts-ignore
                                      s0 = peg$FAILED;
                                    }
// @ts-ignore
                                  } else {
// @ts-ignore
                                    peg$currPos = s0;
// @ts-ignore
                                    s0 = peg$FAILED;
                                  }
// @ts-ignore
                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                    s0 = peg$currPos;
// @ts-ignore
                                    s1 = peg$parse_();
// @ts-ignore
                                    peg$savedPos = peg$currPos;
// @ts-ignore
                                    s2 = peg$f9();
// @ts-ignore
                                    if (s2) {
// @ts-ignore
                                      s2 = undefined;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      s2 = peg$FAILED;
                                    }
// @ts-ignore
                                    if (s2 !== peg$FAILED) {
// @ts-ignore
                                      s3 = peg$parseInterfaceDeclaration();
// @ts-ignore
                                      if (s3 !== peg$FAILED) {
// @ts-ignore
                                        s1 = [s1, s2, s3];
// @ts-ignore
                                        s0 = s1;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        peg$currPos = s0;
// @ts-ignore
                                        s0 = peg$FAILED;
                                      }
// @ts-ignore
                                    } else {
// @ts-ignore
                                      peg$currPos = s0;
// @ts-ignore
                                      s0 = peg$FAILED;
                                    }
// @ts-ignore
                                    if (s0 === peg$FAILED) {
// @ts-ignore
                                      s0 = peg$currPos;
// @ts-ignore
                                      s1 = peg$parse_();
// @ts-ignore
                                      peg$savedPos = peg$currPos;
// @ts-ignore
                                      s2 = peg$f10();
// @ts-ignore
                                      if (s2) {
// @ts-ignore
                                        s2 = undefined;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        s2 = peg$FAILED;
                                      }
// @ts-ignore
                                      if (s2 !== peg$FAILED) {
// @ts-ignore
                                        s3 = peg$parseInterfaceMethodDeclaration();
// @ts-ignore
                                        if (s3 !== peg$FAILED) {
// @ts-ignore
                                          s1 = [s1, s2, s3];
// @ts-ignore
                                          s0 = s1;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          peg$currPos = s0;
// @ts-ignore
                                          s0 = peg$FAILED;
                                        }
// @ts-ignore
                                      } else {
// @ts-ignore
                                        peg$currPos = s0;
// @ts-ignore
                                        s0 = peg$FAILED;
                                      }
// @ts-ignore
                                      if (s0 === peg$FAILED) {
// @ts-ignore
                                        s0 = peg$currPos;
// @ts-ignore
                                        s1 = peg$parse_();
// @ts-ignore
                                        peg$savedPos = peg$currPos;
// @ts-ignore
                                        s2 = peg$f11();
// @ts-ignore
                                        if (s2) {
// @ts-ignore
                                          s2 = undefined;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          s2 = peg$FAILED;
                                        }
// @ts-ignore
                                        if (s2 !== peg$FAILED) {
// @ts-ignore
                                          s3 = peg$parsePropertyDeclaration();
// @ts-ignore
                                          if (s3 !== peg$FAILED) {
// @ts-ignore
                                            s1 = [s1, s2, s3];
// @ts-ignore
                                            s0 = s1;
// @ts-ignore
                                          } else {
// @ts-ignore
                                            peg$currPos = s0;
// @ts-ignore
                                            s0 = peg$FAILED;
                                          }
// @ts-ignore
                                        } else {
// @ts-ignore
                                          peg$currPos = s0;
// @ts-ignore
                                          s0 = peg$FAILED;
                                        }
// @ts-ignore
                                        if (s0 === peg$FAILED) {
// @ts-ignore
                                          s0 = peg$currPos;
// @ts-ignore
                                          s1 = peg$parse_();
// @ts-ignore
                                          peg$savedPos = peg$currPos;
// @ts-ignore
                                          s2 = peg$f12();
// @ts-ignore
                                          if (s2) {
// @ts-ignore
                                            s2 = undefined;
// @ts-ignore
                                          } else {
// @ts-ignore
                                            s2 = peg$FAILED;
                                          }
// @ts-ignore
                                          if (s2 !== peg$FAILED) {
// @ts-ignore
                                            s3 = peg$parseTypeDeclaration();
// @ts-ignore
                                            if (s3 !== peg$FAILED) {
// @ts-ignore
                                              s1 = [s1, s2, s3];
// @ts-ignore
                                              s0 = s1;
// @ts-ignore
                                            } else {
// @ts-ignore
                                              peg$currPos = s0;
// @ts-ignore
                                              s0 = peg$FAILED;
                                            }
// @ts-ignore
                                          } else {
// @ts-ignore
                                            peg$currPos = s0;
// @ts-ignore
                                            s0 = peg$FAILED;
                                          }
// @ts-ignore
                                          if (s0 === peg$FAILED) {
// @ts-ignore
                                            s0 = peg$currPos;
// @ts-ignore
                                            s1 = peg$parse_();
// @ts-ignore
                                            peg$savedPos = peg$currPos;
// @ts-ignore
                                            s2 = peg$f13();
// @ts-ignore
                                            if (s2) {
// @ts-ignore
                                              s2 = undefined;
// @ts-ignore
                                            } else {
// @ts-ignore
                                              s2 = peg$FAILED;
                                            }
// @ts-ignore
                                            if (s2 !== peg$FAILED) {
// @ts-ignore
                                              s3 = peg$parseMethodExpression();
// @ts-ignore
                                              if (s3 !== peg$FAILED) {
// @ts-ignore
                                                s1 = [s1, s2, s3];
// @ts-ignore
                                                s0 = s1;
// @ts-ignore
                                              } else {
// @ts-ignore
                                                peg$currPos = s0;
// @ts-ignore
                                                s0 = peg$FAILED;
                                              }
// @ts-ignore
                                            } else {
// @ts-ignore
                                              peg$currPos = s0;
// @ts-ignore
                                              s0 = peg$FAILED;
                                            }
// @ts-ignore
                                            if (s0 === peg$FAILED) {
// @ts-ignore
                                              s0 = peg$parseIgnoreStatement();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parseWhiteSpace();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseBlockCommentToken();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseLineCommentToken();
      }
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parseWhiteSpace();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseBlockCommentToken();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseLineCommentToken();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDocBlock() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseWhiteSpace();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parseBlockCommentToken();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f14(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseWhiteSpace();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseLineCommentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          s3 = peg$parseLineCommentToken();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f15(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c2) {
// @ts-ignore
        s3 = peg$c2;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parsePreprocessorLine();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f16();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfndefDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 6) === peg$c3) {
// @ts-ignore
        s3 = peg$c3;
// @ts-ignore
        peg$currPos += 6;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parsePreprocessorLine();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f17();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfdefDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c4) {
// @ts-ignore
        s3 = peg$c4;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parsePreprocessorLine();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f18();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseElifDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c5) {
// @ts-ignore
        s3 = peg$c5;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parsePreprocessorLine();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f19();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseElseDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c6) {
// @ts-ignore
        s3 = peg$c6;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parsePreprocessorLine();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f20();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEndifDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c7) {
// @ts-ignore
        s3 = peg$c7;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s6 = peg$parsePreprocessorLine();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f21();
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDefineDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 6) === peg$c8) {
// @ts-ignore
        s3 = peg$c8;
// @ts-ignore
        peg$currPos += 6;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parseIdentToken();
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s7 = peg$parseSpaces();
// @ts-ignore
              if (s7 === peg$FAILED) {
// @ts-ignore
                s7 = null;
              }
// @ts-ignore
              s8 = peg$parsePreprocessorLine();
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f22(s6);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIncludeDirective() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseHashToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSpaces();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.substr(peg$currPos, 7) === peg$c9) {
// @ts-ignore
        s3 = peg$c9;
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSpaces();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s7 = [];
// @ts-ignore
              if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s8 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s8 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
// @ts-ignore
              while (s8 !== peg$FAILED) {
// @ts-ignore
                s7.push(s8);
// @ts-ignore
                if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s8 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s8 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e11); }
                }
              }
// @ts-ignore
              if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s8 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s8 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e10); }
              }
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                s9 = peg$parseWhiteSpace();
// @ts-ignore
                if (s9 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f23(s7);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseHashToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parseSpaces();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = null;
        }
// @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c9) {
// @ts-ignore
          s3 = peg$c9;
// @ts-ignore
          peg$currPos += 7;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s5 = peg$parseIdentChar();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s4 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            s5 = peg$parseSpaces();
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s6 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                s7 = [];
// @ts-ignore
                if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s8 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s8 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
// @ts-ignore
                while (s8 !== peg$FAILED) {
// @ts-ignore
                  s7.push(s8);
// @ts-ignore
                  if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
                    s8 = input.charAt(peg$currPos);
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s8 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e13); }
                  }
                }
// @ts-ignore
                if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s8 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s8 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
// @ts-ignore
                if (s8 !== peg$FAILED) {
// @ts-ignore
                  s9 = peg$parseWhiteSpace();
// @ts-ignore
                  if (s9 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f24(s7);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePreprocessorLine() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
    }
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 13) {
// @ts-ignore
      s2 = peg$c10;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
      s3 = peg$c11;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExpr() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$parseStringToken();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseBlockCommentToken();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseLineCommentToken();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = [];
// @ts-ignore
          if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s1 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            while (s1 !== peg$FAILED) {
// @ts-ignore
              s0.push(s1);
// @ts-ignore
              if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s1 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
            }
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariables() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    s3 = peg$parseIdentToken();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s6 = peg$c12;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseExpr();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      peg$savedPos = s2;
// @ts-ignore
      s2 = peg$f25(s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s4 = [s4, s5, s6];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parseIdentToken();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
            s7 = peg$c12;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = peg$parseExpr();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s6 = [s6, s7, s8, s9];
// @ts-ignore
              s5 = s6;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          peg$savedPos = s3;
// @ts-ignore
          s3 = peg$f25(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = s3;
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
    }
// @ts-ignore
    if (s1.length < 1) {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGlobalVariable() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseVariables();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s5 = peg$c14;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f26(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunction() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s5 = peg$c15;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseMethodArgumentsDeclaration();
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s8 = peg$c16;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$currPos;
// @ts-ignore
            peg$silentFails++;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
              s11 = peg$c0;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s11 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
// @ts-ignore
            peg$silentFails--;
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              peg$currPos = s10;
// @ts-ignore
              s10 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              s10 = peg$FAILED;
            }
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f27(s1, s3, s6);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfaceDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseInterfaceToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
          s6 = peg$c17;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseIdentToken();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s4 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s7 = peg$c0;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f28(s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseInterfaceToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseIdentToken();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
            s5 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f29(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfaceMethodDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s5 = peg$c15;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseMethodArgumentsDeclaration();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s7 = peg$c16;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
              s9 = peg$c14;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e21); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f30(s1, s3, s6);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMethodArgumentsDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseMethodArgument();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s4 = [s4, s5, s6];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseMethodArgument();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = s3;
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMethodArgument() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f31(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMethodExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseVariables();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s5 = peg$c14;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f32(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePropertyDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s5 = peg$c14;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f33(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseIdentToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s3 = peg$c12;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse_();
// @ts-ignore
          s5 = peg$parseType();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
              s6 = peg$c14;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e21); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f34(s1, s5);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypeDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c18) {
// @ts-ignore
      s1 = peg$c18;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        if (peg$r7.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          if (peg$r7.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s5 = peg$c14;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f35(s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseClassDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseClassToken();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 10) === peg$c19) {
// @ts-ignore
          s6 = peg$c19;
// @ts-ignore
          peg$currPos += 10;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseIdentToken();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s5 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
            s8 = peg$c0;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f36(s3, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseClassToken();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseIdentToken();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
            s5 = peg$c14;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f37(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseClassMethod() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseVisibility();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseType();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseIdentToken();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s7 = peg$c15;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseMethodArgumentsDeclaration();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s9 = peg$c16;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = peg$currPos;
// @ts-ignore
              peg$silentFails++;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                s12 = peg$c0;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s12 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
// @ts-ignore
              peg$silentFails--;
// @ts-ignore
              if (s12 !== peg$FAILED) {
// @ts-ignore
                peg$currPos = s11;
// @ts-ignore
                s11 = undefined;
// @ts-ignore
              } else {
// @ts-ignore
                s11 = peg$FAILED;
              }
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f38(s1, s3, s5, s8);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseClassVariableDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s5 = peg$c14;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f39(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVisibility() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c20) {
// @ts-ignore
      s2 = peg$c20;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s0 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 9) === peg$c21) {
// @ts-ignore
        s2 = peg$c21;
// @ts-ignore
        peg$currPos += 9;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s0 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parse_();
// @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c22) {
// @ts-ignore
          s2 = peg$c22;
// @ts-ignore
          peg$currPos += 7;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s0 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseType() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePrimitiveType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f40(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseCustomType();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCustomType() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c23) {
// @ts-ignore
      s1 = peg$c23;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentToken();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s0 = [ s1, s3 ];
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c24) {
// @ts-ignore
        s1 = peg$c24;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseIdentToken();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s0 = [ s1, s3 ];
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseIdentToken();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f41(s1);
        }
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePrimitiveType() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c25) {
// @ts-ignore
      s0 = peg$c25;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c26) {
// @ts-ignore
        s0 = peg$c26;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c27) {
// @ts-ignore
          s0 = peg$c27;
// @ts-ignore
          peg$currPos += 3;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 3) === peg$c28) {
// @ts-ignore
            s0 = peg$c28;
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 3) === peg$c29) {
// @ts-ignore
              s0 = peg$c29;
// @ts-ignore
              peg$currPos += 3;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 4) === peg$c30) {
// @ts-ignore
                s0 = peg$c30;
// @ts-ignore
                peg$currPos += 4;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e38); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 4) === peg$c31) {
// @ts-ignore
                  s0 = peg$c31;
// @ts-ignore
                  peg$currPos += 4;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e39); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 5) === peg$c32) {
// @ts-ignore
                    s0 = peg$c32;
// @ts-ignore
                    peg$currPos += 5;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e40); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 6) === peg$c33) {
// @ts-ignore
                      s0 = peg$c33;
// @ts-ignore
                      peg$currPos += 6;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e41); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIgnoreStatement() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseIdentToken();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseStringToken();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseNumberToken();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseKeyword();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.length > peg$currPos) {
// @ts-ignore
              s0 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWhiteSpace() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    if (peg$r8.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        if (peg$r8.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s1 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSpaces() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s1 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBlockCommentToken() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c34) {
// @ts-ignore
      s1 = peg$c34;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c35) {
// @ts-ignore
        s5 = peg$c35;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c35) {
// @ts-ignore
          s5 = peg$c35;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c35) {
// @ts-ignore
        s3 = peg$c35;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f42();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLineCommentToken() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c36) {
// @ts-ignore
      s1 = peg$c36;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
        s5 = peg$c11;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
          s5 = peg$c11;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
        s3 = peg$c11;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f43();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentToken() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s3 = peg$parseKeyword();
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s2 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        if (peg$r11.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          if (peg$r11.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
        }
// @ts-ignore
        s3 = [ s4, s5 ];
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s5 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f44(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfaceToken() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 9) === peg$c37) {
// @ts-ignore
      s2 = peg$c37;
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s4 = peg$parseIdentChar();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseClassToken() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c38) {
// @ts-ignore
      s2 = peg$c38;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s4 = peg$parseIdentChar();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStringToken() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      if (peg$r12.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (peg$r13.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        if (peg$r12.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          if (peg$r13.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            if (input.length > peg$currPos) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s5 = [s5, s6];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
        }
      }
// @ts-ignore
      if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3, s4];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      if (peg$r14.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        if (peg$r15.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = peg$currPos;
// @ts-ignore
          if (peg$r13.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            if (input.length > peg$currPos) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s5 = [s5, s6];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
        }
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          if (peg$r15.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s4 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e55); }
          }
// @ts-ignore
          if (s4 === peg$FAILED) {
// @ts-ignore
            s4 = peg$currPos;
// @ts-ignore
            if (peg$r13.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s5 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e53); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              if (input.length > peg$currPos) {
// @ts-ignore
                s6 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e42); }
              }
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                s5 = [s5, s6];
// @ts-ignore
                s4 = s5;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s4;
// @ts-ignore
                s4 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
          }
        }
// @ts-ignore
        if (peg$r14.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2, s3, s4];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNumberToken() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = [];
// @ts-ignore
    if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (peg$r17.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
        }
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        if (peg$r18.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s7 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          if (peg$r19.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s8 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e59); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = [];
// @ts-ignore
            if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s10 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s10 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e56); }
            }
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              while (s10 !== peg$FAILED) {
// @ts-ignore
                s9.push(s10);
// @ts-ignore
                if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s10 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s10 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e56); }
                }
              }
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s7 = [s7, s8, s9];
// @ts-ignore
              s6 = s7;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s6;
// @ts-ignore
              s6 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s4 = [s4, s5, s6];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s1 = [s1, s2, s3];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
      }
// @ts-ignore
      if (peg$r17.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          while (s5 !== peg$FAILED) {
// @ts-ignore
            s4.push(s5);
// @ts-ignore
            if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s5 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e56); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          if (peg$r18.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e58); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            if (peg$r19.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s7 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e59); }
            }
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = [];
// @ts-ignore
              if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s9 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e56); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                while (s9 !== peg$FAILED) {
// @ts-ignore
                  s8.push(s9);
// @ts-ignore
                  if (peg$r16.test(input.charAt(peg$currPos))) {
// @ts-ignore
                    s9 = input.charAt(peg$currPos);
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s9 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e56); }
                  }
                }
// @ts-ignore
              } else {
// @ts-ignore
                s8 = peg$FAILED;
              }
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                s6 = [s6, s7, s8];
// @ts-ignore
                s5 = s6;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s5;
// @ts-ignore
                s5 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = null;
          }
// @ts-ignore
          s1 = [s1, s2, s3, s4, s5];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHashToken() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 35) {
// @ts-ignore
      s2 = peg$c39;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentChar() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r11.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKeyword() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c40) {
// @ts-ignore
      s1 = peg$c40;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseIdentChar();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c41) {
// @ts-ignore
        s1 = peg$c41;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        s3 = peg$parseIdentChar();
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s2 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s1 = [s1, s2];
// @ts-ignore
          s0 = s1;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 8) === peg$c42) {
// @ts-ignore
          s1 = peg$c42;
// @ts-ignore
          peg$currPos += 8;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$currPos;
// @ts-ignore
          peg$silentFails++;
// @ts-ignore
          s3 = peg$parseIdentChar();
// @ts-ignore
          peg$silentFails--;
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s2 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            s1 = [s1, s2];
// @ts-ignore
            s0 = s1;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 3) === peg$c43) {
// @ts-ignore
            s1 = peg$c43;
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e64); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$currPos;
// @ts-ignore
            peg$silentFails++;
// @ts-ignore
            s3 = peg$parseIdentChar();
// @ts-ignore
            peg$silentFails--;
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              s2 = undefined;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s2;
// @ts-ignore
              s2 = peg$FAILED;
            }
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              s1 = [s1, s2];
// @ts-ignore
              s0 = s1;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c2) {
// @ts-ignore
              s1 = peg$c2;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              s2 = peg$currPos;
// @ts-ignore
              peg$silentFails++;
// @ts-ignore
              s3 = peg$parseIdentChar();
// @ts-ignore
              peg$silentFails--;
// @ts-ignore
              if (s3 === peg$FAILED) {
// @ts-ignore
                s2 = undefined;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s2;
// @ts-ignore
                s2 = peg$FAILED;
              }
// @ts-ignore
              if (s2 !== peg$FAILED) {
// @ts-ignore
                s1 = [s1, s2];
// @ts-ignore
                s0 = s1;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.substr(peg$currPos, 9) === peg$c37) {
// @ts-ignore
                s1 = peg$c37;
// @ts-ignore
                peg$currPos += 9;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s2 = peg$currPos;
// @ts-ignore
                peg$silentFails++;
// @ts-ignore
                s3 = peg$parseIdentChar();
// @ts-ignore
                peg$silentFails--;
// @ts-ignore
                if (s3 === peg$FAILED) {
// @ts-ignore
                  s2 = undefined;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s2;
// @ts-ignore
                  s2 = peg$FAILED;
                }
// @ts-ignore
                if (s2 !== peg$FAILED) {
// @ts-ignore
                  s1 = [s1, s2];
// @ts-ignore
                  s0 = s1;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                if (input.substr(peg$currPos, 5) === peg$c38) {
// @ts-ignore
                  s1 = peg$c38;
// @ts-ignore
                  peg$currPos += 5;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e51); }
                }
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  s2 = peg$currPos;
// @ts-ignore
                  peg$silentFails++;
// @ts-ignore
                  s3 = peg$parseIdentChar();
// @ts-ignore
                  peg$silentFails--;
// @ts-ignore
                  if (s3 === peg$FAILED) {
// @ts-ignore
                    s2 = undefined;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s2;
// @ts-ignore
                    s2 = peg$FAILED;
                  }
// @ts-ignore
                  if (s2 !== peg$FAILED) {
// @ts-ignore
                    s1 = [s1, s2];
// @ts-ignore
                    s0 = s1;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$currPos;
// @ts-ignore
                  if (input.substr(peg$currPos, 5) === peg$c44) {
// @ts-ignore
                    s1 = peg$c44;
// @ts-ignore
                    peg$currPos += 5;
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e65); }
                  }
// @ts-ignore
                  if (s1 !== peg$FAILED) {
// @ts-ignore
                    s2 = peg$currPos;
// @ts-ignore
                    peg$silentFails++;
// @ts-ignore
                    s3 = peg$parseIdentChar();
// @ts-ignore
                    peg$silentFails--;
// @ts-ignore
                    if (s3 === peg$FAILED) {
// @ts-ignore
                      s2 = undefined;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s2;
// @ts-ignore
                      s2 = peg$FAILED;
                    }
// @ts-ignore
                    if (s2 !== peg$FAILED) {
// @ts-ignore
                      s1 = [s1, s2];
// @ts-ignore
                      s0 = s1;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$currPos;
// @ts-ignore
                    if (input.substr(peg$currPos, 3) === peg$c45) {
// @ts-ignore
                      s1 = peg$c45;
// @ts-ignore
                      peg$currPos += 3;
// @ts-ignore
                    } else {
// @ts-ignore
                      s1 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e66); }
                    }
// @ts-ignore
                    if (s1 !== peg$FAILED) {
// @ts-ignore
                      s2 = peg$currPos;
// @ts-ignore
                      peg$silentFails++;
// @ts-ignore
                      s3 = peg$parseIdentChar();
// @ts-ignore
                      peg$silentFails--;
// @ts-ignore
                      if (s3 === peg$FAILED) {
// @ts-ignore
                        s2 = undefined;
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s2;
// @ts-ignore
                        s2 = peg$FAILED;
                      }
// @ts-ignore
                      if (s2 !== peg$FAILED) {
// @ts-ignore
                        s1 = [s1, s2];
// @ts-ignore
                        s0 = s1;
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$currPos;
// @ts-ignore
                      if (input.substr(peg$currPos, 3) === peg$c46) {
// @ts-ignore
                        s1 = peg$c46;
// @ts-ignore
                        peg$currPos += 3;
// @ts-ignore
                      } else {
// @ts-ignore
                        s1 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e67); }
                      }
// @ts-ignore
                      if (s1 !== peg$FAILED) {
// @ts-ignore
                        s2 = peg$currPos;
// @ts-ignore
                        peg$silentFails++;
// @ts-ignore
                        s3 = peg$parseIdentChar();
// @ts-ignore
                        peg$silentFails--;
// @ts-ignore
                        if (s3 === peg$FAILED) {
// @ts-ignore
                          s2 = undefined;
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s2;
// @ts-ignore
                          s2 = peg$FAILED;
                        }
// @ts-ignore
                        if (s2 !== peg$FAILED) {
// @ts-ignore
                          s1 = [s1, s2];
// @ts-ignore
                          s0 = s1;
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$currPos;
// @ts-ignore
                        if (input.substr(peg$currPos, 3) === peg$c47) {
// @ts-ignore
                          s1 = peg$c47;
// @ts-ignore
                          peg$currPos += 3;
// @ts-ignore
                        } else {
// @ts-ignore
                          s1 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e68); }
                        }
// @ts-ignore
                        if (s1 !== peg$FAILED) {
// @ts-ignore
                          s2 = peg$currPos;
// @ts-ignore
                          peg$silentFails++;
// @ts-ignore
                          s3 = peg$parseIdentChar();
// @ts-ignore
                          peg$silentFails--;
// @ts-ignore
                          if (s3 === peg$FAILED) {
// @ts-ignore
                            s2 = undefined;
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s2;
// @ts-ignore
                            s2 = peg$FAILED;
                          }
// @ts-ignore
                          if (s2 !== peg$FAILED) {
// @ts-ignore
                            s1 = [s1, s2];
// @ts-ignore
                            s0 = s1;
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          s0 = peg$currPos;
// @ts-ignore
                          if (input.substr(peg$currPos, 2) === peg$c48) {
// @ts-ignore
                            s1 = peg$c48;
// @ts-ignore
                            peg$currPos += 2;
// @ts-ignore
                          } else {
// @ts-ignore
                            s1 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e69); }
                          }
// @ts-ignore
                          if (s1 !== peg$FAILED) {
// @ts-ignore
                            s2 = peg$currPos;
// @ts-ignore
                            peg$silentFails++;
// @ts-ignore
                            s3 = peg$parseIdentChar();
// @ts-ignore
                            peg$silentFails--;
// @ts-ignore
                            if (s3 === peg$FAILED) {
// @ts-ignore
                              s2 = undefined;
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s2;
// @ts-ignore
                              s2 = peg$FAILED;
                            }
// @ts-ignore
                            if (s2 !== peg$FAILED) {
// @ts-ignore
                              s1 = [s1, s2];
// @ts-ignore
                              s0 = s1;
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            s0 = peg$currPos;
// @ts-ignore
                            if (input.substr(peg$currPos, 3) === peg$c49) {
// @ts-ignore
                              s1 = peg$c49;
// @ts-ignore
                              peg$currPos += 3;
// @ts-ignore
                            } else {
// @ts-ignore
                              s1 = peg$FAILED;
// @ts-ignore
                              if (peg$silentFails === 0) { peg$fail(peg$e70); }
                            }
// @ts-ignore
                            if (s1 !== peg$FAILED) {
// @ts-ignore
                              s2 = peg$currPos;
// @ts-ignore
                              peg$silentFails++;
// @ts-ignore
                              s3 = peg$parseIdentChar();
// @ts-ignore
                              peg$silentFails--;
// @ts-ignore
                              if (s3 === peg$FAILED) {
// @ts-ignore
                                s2 = undefined;
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s2;
// @ts-ignore
                                s2 = peg$FAILED;
                              }
// @ts-ignore
                              if (s2 !== peg$FAILED) {
// @ts-ignore
                                s1 = [s1, s2];
// @ts-ignore
                                s0 = s1;
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              s0 = peg$currPos;
// @ts-ignore
                              if (input.substr(peg$currPos, 3) === peg$c50) {
// @ts-ignore
                                s1 = peg$c50;
// @ts-ignore
                                peg$currPos += 3;
// @ts-ignore
                              } else {
// @ts-ignore
                                s1 = peg$FAILED;
// @ts-ignore
                                if (peg$silentFails === 0) { peg$fail(peg$e71); }
                              }
// @ts-ignore
                              if (s1 !== peg$FAILED) {
// @ts-ignore
                                s2 = peg$currPos;
// @ts-ignore
                                peg$silentFails++;
// @ts-ignore
                                s3 = peg$parseIdentChar();
// @ts-ignore
                                peg$silentFails--;
// @ts-ignore
                                if (s3 === peg$FAILED) {
// @ts-ignore
                                  s2 = undefined;
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s2;
// @ts-ignore
                                  s2 = peg$FAILED;
                                }
// @ts-ignore
                                if (s2 !== peg$FAILED) {
// @ts-ignore
                                  s1 = [s1, s2];
// @ts-ignore
                                  s0 = s1;
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s0;
// @ts-ignore
                                  s0 = peg$FAILED;
                                }
// @ts-ignore
                              } else {
// @ts-ignore
                                peg$currPos = s0;
// @ts-ignore
                                s0 = peg$FAILED;
                              }
// @ts-ignore
                              if (s0 === peg$FAILED) {
// @ts-ignore
                                s0 = peg$currPos;
// @ts-ignore
                                if (input.substr(peg$currPos, 2) === peg$c51) {
// @ts-ignore
                                  s1 = peg$c51;
// @ts-ignore
                                  peg$currPos += 2;
// @ts-ignore
                                } else {
// @ts-ignore
                                  s1 = peg$FAILED;
// @ts-ignore
                                  if (peg$silentFails === 0) { peg$fail(peg$e72); }
                                }
// @ts-ignore
                                if (s1 !== peg$FAILED) {
// @ts-ignore
                                  s2 = peg$currPos;
// @ts-ignore
                                  peg$silentFails++;
// @ts-ignore
                                  s3 = peg$parseIdentChar();
// @ts-ignore
                                  peg$silentFails--;
// @ts-ignore
                                  if (s3 === peg$FAILED) {
// @ts-ignore
                                    s2 = undefined;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    peg$currPos = s2;
// @ts-ignore
                                    s2 = peg$FAILED;
                                  }
// @ts-ignore
                                  if (s2 !== peg$FAILED) {
// @ts-ignore
                                    s1 = [s1, s2];
// @ts-ignore
                                    s0 = s1;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    peg$currPos = s0;
// @ts-ignore
                                    s0 = peg$FAILED;
                                  }
// @ts-ignore
                                } else {
// @ts-ignore
                                  peg$currPos = s0;
// @ts-ignore
                                  s0 = peg$FAILED;
                                }
// @ts-ignore
                                if (s0 === peg$FAILED) {
// @ts-ignore
                                  s0 = peg$currPos;
// @ts-ignore
                                  if (input.substr(peg$currPos, 3) === peg$c52) {
// @ts-ignore
                                    s1 = peg$c52;
// @ts-ignore
                                    peg$currPos += 3;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    s1 = peg$FAILED;
// @ts-ignore
                                    if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                  }
// @ts-ignore
                                  if (s1 !== peg$FAILED) {
// @ts-ignore
                                    s2 = peg$currPos;
// @ts-ignore
                                    peg$silentFails++;
// @ts-ignore
                                    s3 = peg$parseIdentChar();
// @ts-ignore
                                    peg$silentFails--;
// @ts-ignore
                                    if (s3 === peg$FAILED) {
// @ts-ignore
                                      s2 = undefined;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      peg$currPos = s2;
// @ts-ignore
                                      s2 = peg$FAILED;
                                    }
// @ts-ignore
                                    if (s2 !== peg$FAILED) {
// @ts-ignore
                                      s1 = [s1, s2];
// @ts-ignore
                                      s0 = s1;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      peg$currPos = s0;
// @ts-ignore
                                      s0 = peg$FAILED;
                                    }
// @ts-ignore
                                  } else {
// @ts-ignore
                                    peg$currPos = s0;
// @ts-ignore
                                    s0 = peg$FAILED;
                                  }
// @ts-ignore
                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                    s0 = peg$currPos;
// @ts-ignore
                                    if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
                                      s1 = peg$c53;
// @ts-ignore
                                      peg$currPos++;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      s1 = peg$FAILED;
// @ts-ignore
                                      if (peg$silentFails === 0) { peg$fail(peg$e74); }
                                    }
// @ts-ignore
                                    if (s1 !== peg$FAILED) {
// @ts-ignore
                                      s2 = peg$currPos;
// @ts-ignore
                                      peg$silentFails++;
// @ts-ignore
                                      s3 = peg$parseIdentChar();
// @ts-ignore
                                      peg$silentFails--;
// @ts-ignore
                                      if (s3 === peg$FAILED) {
// @ts-ignore
                                        s2 = undefined;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        peg$currPos = s2;
// @ts-ignore
                                        s2 = peg$FAILED;
                                      }
// @ts-ignore
                                      if (s2 !== peg$FAILED) {
// @ts-ignore
                                        s1 = [s1, s2];
// @ts-ignore
                                        s0 = s1;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        peg$currPos = s0;
// @ts-ignore
                                        s0 = peg$FAILED;
                                      }
// @ts-ignore
                                    } else {
// @ts-ignore
                                      peg$currPos = s0;
// @ts-ignore
                                      s0 = peg$FAILED;
                                    }
// @ts-ignore
                                    if (s0 === peg$FAILED) {
// @ts-ignore
                                      s0 = peg$currPos;
// @ts-ignore
                                      if (input.substr(peg$currPos, 3) === peg$c23) {
// @ts-ignore
                                        s1 = peg$c23;
// @ts-ignore
                                        peg$currPos += 3;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        s1 = peg$FAILED;
// @ts-ignore
                                        if (peg$silentFails === 0) { peg$fail(peg$e31); }
                                      }
// @ts-ignore
                                      if (s1 !== peg$FAILED) {
// @ts-ignore
                                        s2 = peg$currPos;
// @ts-ignore
                                        peg$silentFails++;
// @ts-ignore
                                        s3 = peg$parseIdentChar();
// @ts-ignore
                                        peg$silentFails--;
// @ts-ignore
                                        if (s3 === peg$FAILED) {
// @ts-ignore
                                          s2 = undefined;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          peg$currPos = s2;
// @ts-ignore
                                          s2 = peg$FAILED;
                                        }
// @ts-ignore
                                        if (s2 !== peg$FAILED) {
// @ts-ignore
                                          s1 = [s1, s2];
// @ts-ignore
                                          s0 = s1;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          peg$currPos = s0;
// @ts-ignore
                                          s0 = peg$FAILED;
                                        }
// @ts-ignore
                                      } else {
// @ts-ignore
                                        peg$currPos = s0;
// @ts-ignore
                                        s0 = peg$FAILED;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOperator() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c54) {
// @ts-ignore
      s0 = peg$c54;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c55) {
// @ts-ignore
        s0 = peg$c55;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c56) {
// @ts-ignore
          s0 = peg$c56;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c57) {
// @ts-ignore
            s0 = peg$c57;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e78); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c58) {
// @ts-ignore
              s0 = peg$c58;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e79); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c59) {
// @ts-ignore
                s0 = peg$c59;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e80); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c60) {
// @ts-ignore
                  s0 = peg$c60;
// @ts-ignore
                  peg$currPos += 2;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e81); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 3) === peg$c61) {
// @ts-ignore
                    s0 = peg$c61;
// @ts-ignore
                    peg$currPos += 3;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e82); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 3) === peg$c62) {
// @ts-ignore
                      s0 = peg$c62;
// @ts-ignore
                      peg$currPos += 3;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e83); }
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      if (input.substr(peg$currPos, 3) === peg$c63) {
// @ts-ignore
                        s0 = peg$c63;
// @ts-ignore
                        peg$currPos += 3;
// @ts-ignore
                      } else {
// @ts-ignore
                        s0 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e84); }
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        if (input.substr(peg$currPos, 3) === peg$c64) {
// @ts-ignore
                          s0 = peg$c64;
// @ts-ignore
                          peg$currPos += 3;
// @ts-ignore
                        } else {
// @ts-ignore
                          s0 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e85); }
                        }
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          if (input.substr(peg$currPos, 2) === peg$c65) {
// @ts-ignore
                            s0 = peg$c65;
// @ts-ignore
                            peg$currPos += 2;
// @ts-ignore
                          } else {
// @ts-ignore
                            s0 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e86); }
                          }
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            if (input.substr(peg$currPos, 2) === peg$c66) {
// @ts-ignore
                              s0 = peg$c66;
// @ts-ignore
                              peg$currPos += 2;
// @ts-ignore
                            } else {
// @ts-ignore
                              s0 = peg$FAILED;
// @ts-ignore
                              if (peg$silentFails === 0) { peg$fail(peg$e87); }
                            }
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              if (input.substr(peg$currPos, 2) === peg$c67) {
// @ts-ignore
                                s0 = peg$c67;
// @ts-ignore
                                peg$currPos += 2;
// @ts-ignore
                              } else {
// @ts-ignore
                                s0 = peg$FAILED;
// @ts-ignore
                                if (peg$silentFails === 0) { peg$fail(peg$e88); }
                              }
// @ts-ignore
                              if (s0 === peg$FAILED) {
// @ts-ignore
                                if (input.substr(peg$currPos, 2) === peg$c68) {
// @ts-ignore
                                  s0 = peg$c68;
// @ts-ignore
                                  peg$currPos += 2;
// @ts-ignore
                                } else {
// @ts-ignore
                                  s0 = peg$FAILED;
// @ts-ignore
                                  if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                }
// @ts-ignore
                                if (s0 === peg$FAILED) {
// @ts-ignore
                                  if (input.substr(peg$currPos, 2) === peg$c69) {
// @ts-ignore
                                    s0 = peg$c69;
// @ts-ignore
                                    peg$currPos += 2;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    s0 = peg$FAILED;
// @ts-ignore
                                    if (peg$silentFails === 0) { peg$fail(peg$e90); }
                                  }
// @ts-ignore
                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                    if (input.substr(peg$currPos, 2) === peg$c70) {
// @ts-ignore
                                      s0 = peg$c70;
// @ts-ignore
                                      peg$currPos += 2;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      s0 = peg$FAILED;
// @ts-ignore
                                      if (peg$silentFails === 0) { peg$fail(peg$e91); }
                                    }
// @ts-ignore
                                    if (s0 === peg$FAILED) {
// @ts-ignore
                                      if (input.substr(peg$currPos, 2) === peg$c71) {
// @ts-ignore
                                        s0 = peg$c71;
// @ts-ignore
                                        peg$currPos += 2;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        s0 = peg$FAILED;
// @ts-ignore
                                        if (peg$silentFails === 0) { peg$fail(peg$e92); }
                                      }
// @ts-ignore
                                      if (s0 === peg$FAILED) {
// @ts-ignore
                                        if (input.substr(peg$currPos, 2) === peg$c72) {
// @ts-ignore
                                          s0 = peg$c72;
// @ts-ignore
                                          peg$currPos += 2;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          s0 = peg$FAILED;
// @ts-ignore
                                          if (peg$silentFails === 0) { peg$fail(peg$e93); }
                                        }
// @ts-ignore
                                        if (s0 === peg$FAILED) {
// @ts-ignore
                                          if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
                                            s0 = peg$c73;
// @ts-ignore
                                            peg$currPos++;
// @ts-ignore
                                          } else {
// @ts-ignore
                                            s0 = peg$FAILED;
// @ts-ignore
                                            if (peg$silentFails === 0) { peg$fail(peg$e94); }
                                          }
// @ts-ignore
                                          if (s0 === peg$FAILED) {
// @ts-ignore
                                            if (input.substr(peg$currPos, 2) === peg$c74) {
// @ts-ignore
                                              s0 = peg$c74;
// @ts-ignore
                                              peg$currPos += 2;
// @ts-ignore
                                            } else {
// @ts-ignore
                                              s0 = peg$FAILED;
// @ts-ignore
                                              if (peg$silentFails === 0) { peg$fail(peg$e95); }
                                            }
// @ts-ignore
                                            if (s0 === peg$FAILED) {
// @ts-ignore
                                              if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
                                                s0 = peg$c75;
// @ts-ignore
                                                peg$currPos++;
// @ts-ignore
                                              } else {
// @ts-ignore
                                                s0 = peg$FAILED;
// @ts-ignore
                                                if (peg$silentFails === 0) { peg$fail(peg$e96); }
                                              }
// @ts-ignore
                                              if (s0 === peg$FAILED) {
// @ts-ignore
                                                if (input.substr(peg$currPos, 2) === peg$c76) {
// @ts-ignore
                                                  s0 = peg$c76;
// @ts-ignore
                                                  peg$currPos += 2;
// @ts-ignore
                                                } else {
// @ts-ignore
                                                  s0 = peg$FAILED;
// @ts-ignore
                                                  if (peg$silentFails === 0) { peg$fail(peg$e97); }
                                                }
// @ts-ignore
                                                if (s0 === peg$FAILED) {
// @ts-ignore
                                                  s0 = peg$currPos;
// @ts-ignore
                                                  if (input.substr(peg$currPos, 3) === peg$c45) {
// @ts-ignore
                                                    s1 = peg$c45;
// @ts-ignore
                                                    peg$currPos += 3;
// @ts-ignore
                                                  } else {
// @ts-ignore
                                                    s1 = peg$FAILED;
// @ts-ignore
                                                    if (peg$silentFails === 0) { peg$fail(peg$e66); }
                                                  }
// @ts-ignore
                                                  if (s1 === peg$FAILED) {
// @ts-ignore
                                                    if (input.substr(peg$currPos, 3) === peg$c46) {
// @ts-ignore
                                                      s1 = peg$c46;
// @ts-ignore
                                                      peg$currPos += 3;
// @ts-ignore
                                                    } else {
// @ts-ignore
                                                      s1 = peg$FAILED;
// @ts-ignore
                                                      if (peg$silentFails === 0) { peg$fail(peg$e67); }
                                                    }
// @ts-ignore
                                                    if (s1 === peg$FAILED) {
// @ts-ignore
                                                      if (input.substr(peg$currPos, 3) === peg$c47) {
// @ts-ignore
                                                        s1 = peg$c47;
// @ts-ignore
                                                        peg$currPos += 3;
// @ts-ignore
                                                      } else {
// @ts-ignore
                                                        s1 = peg$FAILED;
// @ts-ignore
                                                        if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                                      }
// @ts-ignore
                                                      if (s1 === peg$FAILED) {
// @ts-ignore
                                                        if (input.substr(peg$currPos, 2) === peg$c48) {
// @ts-ignore
                                                          s1 = peg$c48;
// @ts-ignore
                                                          peg$currPos += 2;
// @ts-ignore
                                                        } else {
// @ts-ignore
                                                          s1 = peg$FAILED;
// @ts-ignore
                                                          if (peg$silentFails === 0) { peg$fail(peg$e69); }
                                                        }
// @ts-ignore
                                                        if (s1 === peg$FAILED) {
// @ts-ignore
                                                          if (input.substr(peg$currPos, 3) === peg$c49) {
// @ts-ignore
                                                            s1 = peg$c49;
// @ts-ignore
                                                            peg$currPos += 3;
// @ts-ignore
                                                          } else {
// @ts-ignore
                                                            s1 = peg$FAILED;
// @ts-ignore
                                                            if (peg$silentFails === 0) { peg$fail(peg$e70); }
                                                          }
// @ts-ignore
                                                          if (s1 === peg$FAILED) {
// @ts-ignore
                                                            if (input.substr(peg$currPos, 3) === peg$c50) {
// @ts-ignore
                                                              s1 = peg$c50;
// @ts-ignore
                                                              peg$currPos += 3;
// @ts-ignore
                                                            } else {
// @ts-ignore
                                                              s1 = peg$FAILED;
// @ts-ignore
                                                              if (peg$silentFails === 0) { peg$fail(peg$e71); }
                                                            }
// @ts-ignore
                                                            if (s1 === peg$FAILED) {
// @ts-ignore
                                                              if (input.substr(peg$currPos, 2) === peg$c51) {
// @ts-ignore
                                                                s1 = peg$c51;
// @ts-ignore
                                                                peg$currPos += 2;
// @ts-ignore
                                                              } else {
// @ts-ignore
                                                                s1 = peg$FAILED;
// @ts-ignore
                                                                if (peg$silentFails === 0) { peg$fail(peg$e72); }
                                                              }
// @ts-ignore
                                                              if (s1 === peg$FAILED) {
// @ts-ignore
                                                                if (input.substr(peg$currPos, 3) === peg$c52) {
// @ts-ignore
                                                                  s1 = peg$c52;
// @ts-ignore
                                                                  peg$currPos += 3;
// @ts-ignore
                                                                } else {
// @ts-ignore
                                                                  s1 = peg$FAILED;
// @ts-ignore
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
// @ts-ignore
                                                  if (s1 !== peg$FAILED) {
// @ts-ignore
                                                    s2 = peg$currPos;
// @ts-ignore
                                                    peg$silentFails++;
// @ts-ignore
                                                    s3 = peg$parseIdentChar();
// @ts-ignore
                                                    peg$silentFails--;
// @ts-ignore
                                                    if (s3 === peg$FAILED) {
// @ts-ignore
                                                      s2 = undefined;
// @ts-ignore
                                                    } else {
// @ts-ignore
                                                      peg$currPos = s2;
// @ts-ignore
                                                      s2 = peg$FAILED;
                                                    }
// @ts-ignore
                                                    if (s2 !== peg$FAILED) {
// @ts-ignore
                                                      s1 = [s1, s2];
// @ts-ignore
                                                      s0 = s1;
// @ts-ignore
                                                    } else {
// @ts-ignore
                                                      peg$currPos = s0;
// @ts-ignore
                                                      s0 = peg$FAILED;
                                                    }
// @ts-ignore
                                                  } else {
// @ts-ignore
                                                    peg$currPos = s0;
// @ts-ignore
                                                    s0 = peg$FAILED;
                                                  }
// @ts-ignore
                                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                                    if (peg$r20.test(input.charAt(peg$currPos))) {
// @ts-ignore
                                                      s0 = input.charAt(peg$currPos);
// @ts-ignore
                                                      peg$currPos++;
// @ts-ignore
                                                    } else {
// @ts-ignore
                                                      s0 = peg$FAILED;
// @ts-ignore
                                                      if (peg$silentFails === 0) { peg$fail(peg$e98); }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }


// @ts-ignore
    const helper = new ParserHelper
// @ts-ignore
    const unitInfo = new UnitInfo(options.fileName, options.fullFileName)

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = any;
export type Chunk =
  | void
  | [_, IfDirective]
  | [_, IfdefDirective]
  | [_, IfndefDirective]
  | [_, ElifDirective]
  | [_, ElseDirective]
  | [_, EndifDirective]
  | [_, DefineDirective]
  | [_, IncludeDirective]
  | [_, undefined, ClassDeclaration]
  | [_, undefined, GlobalVariable]
  | [_, undefined, Function_1]
  | [_, undefined, ClassMethod]
  | [_, undefined, ClassVariableDeclaration]
  | [_, undefined, InterfaceDeclaration]
  | [_, undefined, InterfaceMethodDeclaration]
  | [_, undefined, PropertyDeclaration]
  | [_, undefined, TypeDeclaration]
  | [_, undefined, MethodExpression]
  | IgnoreStatement;
export type _ = (WhiteSpace | BlockCommentToken | LineCommentToken)[];
export type DocBlock = [BlockCommentToken] | [...LineCommentToken[]];
export type IfDirective = void;
export type IfndefDirective = void;
export type IfdefDirective = void;
export type ElifDirective = void;
export type ElseDirective = void;
export type EndifDirective = void;
export type DefineDirective = void;
export type IncludeDirective = void;
export type PreprocessorLine = [string[], "\r" | null, "\n"];
export type Expr =
  | StringToken
  | BlockCommentToken
  | LineCommentToken
  | string[];
export type Variables = [
  IdentToken,
  {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  }
][];
export type GlobalVariable = void;
export type Function_1 = void;
export type InterfaceDeclaration = void;
export type InterfaceMethodDeclaration = void;
export type MethodArgumentsDeclaration = MethodArgument[];
export type MethodArgument = [
  Type,
  IdentToken,
  {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  }
];
export type MethodExpression = void;
export type PropertyDeclaration = void;
export type TypeDeclaration = void;
export type ClassDeclaration = void;
export type ClassMethod = void;
export type ClassVariableDeclaration = void;
export type Visibility = "public" | "protected" | "private";
export type Type = [PrimitiveType] | CustomType;
export type CustomType = "ptr" | "this" | [IdentToken];
export type PrimitiveType =
  | "void"
  | "bool"
  | "str"
  | "fix"
  | "int"
  | "long"
  | "byte"
  | "float"
  | "double";
export type IgnoreStatement =
  | IdentToken
  | StringToken
  | NumberToken
  | Keyword
  | string;
export type WhiteSpace = string[];
export type Spaces = string[];
export type BlockCommentToken = any;
export type LineCommentToken = string;
export type IdentToken = string;
export type InterfaceToken = [_, "interface", undefined];
export type ClassToken = [_, "class", undefined];
export type StringToken = [_, string, (string | [string, string])[], string];
export type NumberToken =
  | [_, string[], [string, string[], [string, string, string[]] | null] | null]
  | [_, string[], string, string[], [string, string, string[]] | null];
export type HashToken = [_, "#"];
export type IdentChar = string;
export type Keyword =
  | ["return", undefined]
  | ["break", undefined]
  | ["continue", undefined]
  | ["for", undefined]
  | ["if", undefined]
  | ["interface", undefined]
  | ["class", undefined]
  | ["const", undefined]
  | ["mod", undefined]
  | ["shl", undefined]
  | ["shr", undefined]
  | ["or", undefined]
  | ["and", undefined]
  | ["xor", undefined]
  | ["as", undefined]
  | ["not", undefined]
  | ["_", undefined]
  | ["ptr", undefined];
export type Operator =
  | "+="
  | "-="
  | "*="
  | "/="
  | "%="
  | "^="
  | "&="
  | ">>="
  | "<<="
  | "&&="
  | "||="
  | "--"
  | "++"
  | "<<"
  | ">>"
  | "||"
  | "&&"
  | "=="
  | "!="
  | ">"
  | ">="
  | "<"
  | "<="
  | ["mod" | "shl" | "shr" | "or" | "and" | "xor" | "as" | "not", undefined]
  | string;
